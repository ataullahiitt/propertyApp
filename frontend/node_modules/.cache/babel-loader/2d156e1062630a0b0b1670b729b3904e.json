{"ast":null,"code":"var _jsxFileName = \"/home/ataullah/Explore/docker/node-project/client/src/store/property-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PropertyContext = /*#__PURE__*/React.createContext({\n  properties: [],\n  getProperties: () => {},\n  addNewProperty: () => {},\n  getProperty: () => {},\n  onDelete: () => {},\n  onUpdate: () => {}\n});\nexport const PropertyContextProvider = props => {\n  _s();\n\n  const [properties, setProperties] = useState([]);\n\n  const getProperties = data => {\n    setProperties(data);\n  };\n\n  const addNewPropertyHandler = data => {\n    setProperties([...properties, data]);\n  };\n\n  const getPropertyHandler = propertyId => {\n    return properties.find(property => property.uuid === propertyId);\n  };\n\n  const deletePropertyHandler = propertyId => {\n    const updatedProperties = properties.filter(property => property.uuid !== propertyId);\n    setProperties(updatedProperties);\n  };\n\n  const updatePropertyHandler = (propertyId, updatedProperty) => {\n    const updatedProperties = properties.map(property => property.uuid === propertyId ? { ...property,\n      ...updatedProperty\n    } : property);\n    setProperties(updatedProperties);\n  };\n\n  const contextValue = {\n    properties: properties,\n    getProperties: getProperties,\n    addNewProperty: addNewPropertyHandler,\n    getProperty: getPropertyHandler,\n    onDelete: deletePropertyHandler,\n    onUpdate: updatePropertyHandler\n  };\n  return /*#__PURE__*/_jsxDEV(PropertyContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 12\n  }, this);\n};\n\n_s(PropertyContextProvider, \"xGz7Mev5RBvuf7UXmtYuJsU7H0A=\");\n\n_c = PropertyContextProvider;\nexport default PropertyContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"PropertyContextProvider\");","map":{"version":3,"sources":["/home/ataullah/Explore/docker/node-project/client/src/store/property-context.js"],"names":["React","useState","PropertyContext","createContext","properties","getProperties","addNewProperty","getProperty","onDelete","onUpdate","PropertyContextProvider","props","setProperties","data","addNewPropertyHandler","getPropertyHandler","propertyId","find","property","uuid","deletePropertyHandler","updatedProperties","filter","updatePropertyHandler","updatedProperty","map","contextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,eAAe,gBAAGF,KAAK,CAACG,aAAN,CAAoB;AAExCC,EAAAA,UAAU,EAAE,EAF4B;AAGxCC,EAAAA,aAAa,EAAE,MAAM,CAAG,CAHgB;AAIxCC,EAAAA,cAAc,EAAE,MAAM,CAAG,CAJe;AAKxCC,EAAAA,WAAW,EAAE,MAAM,CAAG,CALkB;AAMxCC,EAAAA,QAAQ,EAAE,MAAM,CAAG,CANqB;AAOxCC,EAAAA,QAAQ,EAAE,MAAM,CAAG;AAPqB,CAApB,CAAxB;AAUA,OAAO,MAAMC,uBAAuB,GAAIC,KAAD,IAAW;AAAA;;AAE9C,QAAM,CAACP,UAAD,EAAaQ,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMI,aAAa,GAAIQ,IAAD,IAAU;AAC5BD,IAAAA,aAAa,CAACC,IAAD,CAAb;AACH,GAFD;;AAIA,QAAMC,qBAAqB,GAAID,IAAD,IAAU;AAEpCD,IAAAA,aAAa,CAAC,CAAC,GAAGR,UAAJ,EAAgBS,IAAhB,CAAD,CAAb;AACH,GAHD;;AAKA,QAAME,kBAAkB,GAAIC,UAAD,IAAgB;AAEvC,WAAOZ,UAAU,CAACa,IAAX,CAAiBC,QAAD,IAAcA,QAAQ,CAACC,IAAT,KAAkBH,UAAhD,CAAP;AACH,GAHD;;AAIA,QAAMI,qBAAqB,GAAIJ,UAAD,IAAgB;AAC1C,UAAMK,iBAAiB,GAAGjB,UAAU,CAACkB,MAAX,CAAmBJ,QAAD,IAAcA,QAAQ,CAACC,IAAT,KAAkBH,UAAlD,CAA1B;AACAJ,IAAAA,aAAa,CAACS,iBAAD,CAAb;AACH,GAHD;;AAIA,QAAME,qBAAqB,GAAG,CAACP,UAAD,EAAaQ,eAAb,KAAiC;AAC3D,UAAMH,iBAAiB,GAAGjB,UAAU,CAACqB,GAAX,CAAgBP,QAAD,IAAcA,QAAQ,CAACC,IAAT,KAAkBH,UAAlB,GAA+B,EAAE,GAAGE,QAAL;AAAe,SAAGM;AAAlB,KAA/B,GAAqEN,QAAlG,CAA1B;AACAN,IAAAA,aAAa,CAACS,iBAAD,CAAb;AACH,GAHD;;AAIA,QAAMK,YAAY,GAAG;AACjBtB,IAAAA,UAAU,EAAEA,UADK;AAEjBC,IAAAA,aAAa,EAAEA,aAFE;AAGjBC,IAAAA,cAAc,EAAEQ,qBAHC;AAIjBP,IAAAA,WAAW,EAAEQ,kBAJI;AAKjBP,IAAAA,QAAQ,EAAEY,qBALO;AAMjBX,IAAAA,QAAQ,EAAEc;AANO,GAArB;AAQA,sBAAO,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEG,YAAjC;AAAA,cAAgDf,KAAK,CAACgB;AAAtD;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAlCM;;GAAMjB,uB;;KAAAA,uB;AAmCb,eAAeR,eAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst PropertyContext = React.createContext({\n\n    properties: [],\n    getProperties: () => { },\n    addNewProperty: () => { },\n    getProperty: () => { },\n    onDelete: () => { },\n    onUpdate: () => { }\n});\n\nexport const PropertyContextProvider = (props) => {\n\n    const [properties, setProperties] = useState([]);\n\n    const getProperties = (data) => {\n        setProperties(data);\n    }\n\n    const addNewPropertyHandler = (data) => {\n\n        setProperties([...properties, data])\n    }\n\n    const getPropertyHandler = (propertyId) => {\n\n        return properties.find((property) => property.uuid === propertyId);\n    }\n    const deletePropertyHandler = (propertyId) => {\n        const updatedProperties = properties.filter((property) => property.uuid !== propertyId);\n        setProperties(updatedProperties);\n    }\n    const updatePropertyHandler = (propertyId, updatedProperty) => {\n        const updatedProperties = properties.map((property) => property.uuid === propertyId ? { ...property, ...updatedProperty } : property);\n        setProperties(updatedProperties);\n    }\n    const contextValue = {\n        properties: properties,\n        getProperties: getProperties,\n        addNewProperty: addNewPropertyHandler,\n        getProperty: getPropertyHandler,\n        onDelete: deletePropertyHandler,\n        onUpdate: updatePropertyHandler\n    }\n    return <PropertyContext.Provider value={contextValue}>{props.children}</PropertyContext.Provider>\n}\nexport default PropertyContext;"]},"metadata":{},"sourceType":"module"}